services:
  postgres:
    image: postgres:16-alpine
    container_name: todo-app-postgres-prod
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-todoapp}
    ports:
      - "${POSTGRES_PORT:-5437}:5432"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: todo-app-nextjs-prod
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgres://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-todoapp}
      - JWT_SECRET=${JWT_SECRET:-change-this-in-production}
      - NODE_ENV=production
      - PORT=${PORT:-3000}
    ports:
      - "${PORT:-3000}:3000"
    networks:
      - app-network
    command: >
      sh -c "
        echo 'Waiting for PostgreSQL to be ready...' &&
        until pg_isready -h postgres -p 5432 -U postgres; do
          echo 'PostgreSQL is unavailable - sleeping'
          sleep 1
        done &&
        echo 'PostgreSQL is up - executing database migrations' &&
        npm run db:push &&
        echo 'Starting production server' &&
        npm run start
      "

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data_prod:
